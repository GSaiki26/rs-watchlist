openapi: '3.0.0'
info:
  title: Watchlist API
  description: An api to manipulate data from database.
  contact:
    name: Gustavo Saiki
    email: GSaiki26@gmail.com
  version: '0.1.0'
servers:
  - url: http://watchlist-api:3000

security: []


paths:
  /user:
    post:
      summary: Create a User.
      description: A method to create a new user.
      operationId: createNewUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          $ref: '#/components/responses/201_User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    patch:
      summary: Update a User.
      description: A method to update an user.
      operationId: updateUser
      security: [basicAuth: []]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          $ref: '#/components/responses/200_User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete a User.
      description: A method to delete an user.
      operationId: deleteUser
      security: [basicAuth: []]
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /user/{user_id}:
    parameters:
      - in: path
        name: user_id  
        required: true
        schema:
          $ref: '#/components/schemas/Id'

    get:
      summary: Get a User.
      description: A method to get some user.
      operationId: getUser
      security: []
      responses:
        '200':
          $ref: '#/components/responses/200_User'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /user/login:
    post:
      summary: Login a User.
      description: A method to login an user.
      operationId: loginUser
      security: [basicAuth: []]
      responses:
        '200':
          $ref: '#/components/responses/200_User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /watchlist:
    get:
      summary: Get user's watchlists.
      description: A method to get all the watchlist that user has.
      operationId: getUserWatchlists
      security: [basicAuth: []]
      responses:
        '200':
          description: Retrieved Watchlist.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Response'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WatchlistResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    post:
      summary: Create a new watchlist
      description: A method to create a new watchlist in the api.
      operationId: createNewWatchlist
      security: [basicAuth: []]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatchlistRequest'
      responses:
        '200':
          $ref: '#/components/responses/200_Watchlist'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /watchlist/{watchlist_id}:
    parameters:
      - in: path
        name: watchlist_id
        required: true
        schema:
          $ref: '#/components/schemas/Id'

    get:
      summary: Get watchlist
      description: A method to get some watchlist.
      operationId: getWatchlist
      security: [basicAuth: []]
      responses:
        '200':
          $ref: '#/components/responses/200_Watchlist'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    patch:
      summary: Update a Watchlist.
      description: A method to update a watchlist.
      operationId: updateWatchlist
      security: [basicAuth: []]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatchlistRequest'
      responses:
        '200':
          $ref: '#/components/responses/200_Watchlist'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete a Watchlist.
      description: A method to delete a watchlist.
      operationId: deleteWatchlist
      security: [basicAuth: []]
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'


  # /media:
  #   post:
  #     summary: Create a Media.
  #     description: A method to create a new media.
  #     operationId: createNewMedia
  #     security: [basicAuth: []]
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/RequestMediaPost'
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/200_Media'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '429':
  #         $ref: '#/components/responses/429'
  #       '500':
  #         $ref: '#/components/responses/500'

  # /media/{media_id}:
  #   parameters:
  #     - in: path
  #       name: media_id
  #       required: true
  #       schema:
  #         $ref: '#/components/schemas/Id'

  #   patch:
  #     summary: Update a Media.
  #     description: A method to update a media.
  #     operationId: updateMedia
  #     security: [basicAuth: []]
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/RequestMediaPost'
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/200_Media'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         $ref: '#/components/responses/404'
  #       '429':
  #         $ref: '#/components/responses/429'
  #       '500':
  #         $ref: '#/components/responses/500'

  #   delete:
  #     summary: Delete a Media.
  #     description: A method to delete a media.
  #     operationId: deleteMedia
  #     security: [basicAuth: []]
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/200'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         $ref: '#/components/responses/404'
  #       '429':
  #         $ref: '#/components/responses/429'
  #       '500':
  #         $ref: '#/components/responses/500'

  #   get:
  #     summary: Get a Media.
  #     description: A method to get some media.
  #     operationId: getMedia
  #     security: [basicAuth: []]
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/200_Media'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         $ref: '#/components/responses/403'
  #       '429':
  #         $ref: '#/components/responses/429'
  #       '500':
  #         $ref: '#/components/responses/500'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    # Basic Types
    Id:
      type: string
      example: 'ATJ9JG27YSDDW30JLUKZ1S6IUE'
      pattern: '^[A-Z0-9]{26}$'
    Datetime:
      type: string
      example: '2024-01-01T00:00:00.000000000Z'
      pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{9}Z$'
    Field:
      type: string
      example: 'Title'
      pattern: '^[a-zA-Z0-9!@#$%&*_\-+.,<>;\/? ]{3,20}$'
    BigField:
      type: string
      example: 'A big description'
      pattern: '^[a-zA-Z0-9!@#$%&*_\-+.,<>;\/? ]{3,60}$'


    # Inheritance
    ApiEntry:
      type: object
      required: [id, created_at, updated_at]
      properties:
        id:
          $ref: '#/components/schemas/Id'
        created_at:
          $ref: '#/components/schemas/Datetime'
        updated_at:
          $ref: '#/components/schemas/Datetime'

    # Objects
    UserRequest:
      type: object
      required: [username, password]
      additionalProperties: false
      properties:
        username:
          $ref: '#/components/schemas/Field'
        password:
          $ref: '#/components/schemas/Field'
    UserResponse:
      type: object
      required: [username, password]
      additionalProperties: false
      $ref: '#/components/schemas/ApiEntry'
      properties:
        username:
          $ref: '#/components/schemas/Field'
        password:
          $ref: '#/components/schemas/Field'

    MediaRequest:
      type: object
      required: [title, description, watchlist, watched]
      additionalProperties: false
      properties:
        title:
          $ref: '#/components/schemas/Field'
        description:
          $ref: '#/components/schemas/BigField'
        watchlist:
          $ref: '#/components/schemas/Id'
        watched:
          type: boolean
    MediaResponse:
      type: object
      required: [title, description, watchlist, watched]
      additionalProperties: false
      $ref: '#/components/schemas/ApiEntry'
      properties:
        title:
          $ref: '#/components/schemas/Field'
        description:
          $ref: '#/components/schemas/BigField'
        watchlist:
          $ref: '#/components/schemas/Id'
        watched:
          type: boolean
    
    WatchlistRequest:
      type: object
      required: [owner, members, title, description]
      additionalProperties: false
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        title:
          $ref: '#/components/schemas/Field'
        description:
          $ref: '#/components/schemas/BigField'
    WatchlistResponse:
      type: object
      required: [owner, members, title, description]
      additionalProperties: false
      $ref: '#/components/schemas/ApiEntry'
      properties:
        owner:
          $ref: '#/components/schemas/Id'
        members:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        title:
          $ref: '#/components/schemas/Field'
        description:
          $ref: '#/components/schemas/BigField'

    # Responses
    Response:
      type: object
      additionalProperties: true
      required: [status]
      properties:
        status:
          type: string
          example: 'Success'
          enum: ['Success', 'Failed']
    ResponseError:
      type: object
      required: [status, message]
      additionalProperties: false
      $ref: '#/components/schemas/Response'
      properties:
        message:
          $ref: '#/components/schemas/BigField'

  responses:
    '200':
      description: Ok.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    '200_Media':
      description: Media updated.
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Response'
            additionalProperties: false
            properties:
              data:
                type: object
                $ref: '#/components/schemas/MediaResponse'
    '200_User':
      description: User updated.
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Response'
            additionalProperties: true
            properties:
              data:
                $ref: '#/components/schemas/UserResponse'

    '200_Watchlist':
      description: Watchlist updated.
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Response'
            properties:
              data:
                $ref: '#/components/schemas/WatchlistResponse'

    
    '201_Media':
      description: Media created.
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Response'
            additionalProperties: false
            properties:
              data:
                type: object
                $ref: '#/components/schemas/MediaResponse'
    '201_User':
      description: User created.
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Response'
            additionalProperties: true
            properties:
              data:
                $ref: '#/components/schemas/UserResponse'

    '201_Watchlist':
      description: Watchlist created.
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Response'
            properties:
              data:
                $ref: '#/components/schemas/WatchlistResponse'
    '400':
      description: Bad request parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    '401':
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    '403':
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    '404':
      description: Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    '500':
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
